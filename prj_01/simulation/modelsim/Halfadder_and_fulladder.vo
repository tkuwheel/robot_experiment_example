// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "09/11/2023 14:21:47"

// 
// Device: Altera EP3C16F484C6 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module fulladd (
	X,
	Y,
	Cin,
	Sum,
	Cout);
input 	X;
input 	Y;
input 	Cin;
output 	Sum;
output 	Cout;

// Design Ports Information
// Sum	=>  Location: PIN_J2,	 I/O Standard: 2.5 V,	 Current Strength: Default
// Cout	=>  Location: PIN_J1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// X	=>  Location: PIN_H5,	 I/O Standard: 2.5 V,	 Current Strength: Default
// Y	=>  Location: PIN_H6,	 I/O Standard: 2.5 V,	 Current Strength: Default
// Cin	=>  Location: PIN_J6,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Sum~output_o ;
wire \Cout~output_o ;
wire \Cin~input_o ;
wire \Y~input_o ;
wire \X~input_o ;
wire \HA2|Sum~0_combout ;
wire \comb~0_combout ;


// Location: IOOBUF_X0_Y20_N2
cycloneiii_io_obuf \Sum~output (
	.i(\HA2|Sum~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Sum~output_o ),
	.obar());
// synopsys translate_off
defparam \Sum~output .bus_hold = "false";
defparam \Sum~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y20_N9
cycloneiii_io_obuf \Cout~output (
	.i(\comb~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Cout~output_o ),
	.obar());
// synopsys translate_off
defparam \Cout~output .bus_hold = "false";
defparam \Cout~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y24_N1
cycloneiii_io_ibuf \Cin~input (
	.i(Cin),
	.ibar(gnd),
	.o(\Cin~input_o ));
// synopsys translate_off
defparam \Cin~input .bus_hold = "false";
defparam \Cin~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y25_N22
cycloneiii_io_ibuf \Y~input (
	.i(Y),
	.ibar(gnd),
	.o(\Y~input_o ));
// synopsys translate_off
defparam \Y~input .bus_hold = "false";
defparam \Y~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y27_N1
cycloneiii_io_ibuf \X~input (
	.i(X),
	.ibar(gnd),
	.o(\X~input_o ));
// synopsys translate_off
defparam \X~input .bus_hold = "false";
defparam \X~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y24_N8
cycloneiii_lcell_comb \HA2|Sum~0 (
// Equation(s):
// \HA2|Sum~0_combout  = \Cin~input_o  $ (\Y~input_o  $ (\X~input_o ))

	.dataa(\Cin~input_o ),
	.datab(gnd),
	.datac(\Y~input_o ),
	.datad(\X~input_o ),
	.cin(gnd),
	.combout(\HA2|Sum~0_combout ),
	.cout());
// synopsys translate_off
defparam \HA2|Sum~0 .lut_mask = 16'hA55A;
defparam \HA2|Sum~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y24_N2
cycloneiii_lcell_comb \comb~0 (
// Equation(s):
// \comb~0_combout  = (\Cin~input_o  & ((\Y~input_o ) # (\X~input_o ))) # (!\Cin~input_o  & (\Y~input_o  & \X~input_o ))

	.dataa(\Cin~input_o ),
	.datab(gnd),
	.datac(\Y~input_o ),
	.datad(\X~input_o ),
	.cin(gnd),
	.combout(\comb~0_combout ),
	.cout());
// synopsys translate_off
defparam \comb~0 .lut_mask = 16'hFAA0;
defparam \comb~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign Sum = \Sum~output_o ;

assign Cout = \Cout~output_o ;

endmodule
